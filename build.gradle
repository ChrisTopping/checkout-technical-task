plugins {
    id 'java'
    id "io.freefair.lombok" version "6.3.0"
    id 'jacoco'
    id 'org.barfuin.gradle.jacocolog' version '1.0.1'
}

group 'com.cpt'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    implementation 'org.javamoney:moneta:1.4.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.21.0'
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.7.0")
    testImplementation('org.mockito:mockito-junit-jupiter:4.1.0')

}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/it/java')
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = 'Run integration tests.'
    check.dependsOn(integrationTest)
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn integrationTest

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    dependsOn test
    finalizedBy jacocoTestCoverageVerification
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacoco')
    }
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                counter = 'CLASS'
                minimum = 1.0
            }
            limit {
                counter = 'METHOD'
                minimum = 1.0
            }
            limit {
                counter = 'BRANCH'
                minimum = 1.0
            }
            limit {
                counter = 'LINE'
                minimum = 1.0
            }
            limit {
                counter = 'INSTRUCTION'
                minimum = 1.0
            }
            limit {
                counter = 'COMPLEXITY'
                minimum = 1.0
            }
        }
    }
}